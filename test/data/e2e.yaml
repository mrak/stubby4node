- request:
    url: /basic/get

- request:
    url: /basic/put
    method: PUT

- request:
    url: /basic/post
    method: post

- request:
    url: /basic/delete
    method: DELETE

- request:
    url: /basic/head
    method: HEAD

- request:
    url: /basic/all
    method: [put, post, get, delete, head]



- request:
    url: /get/body
    method: GET
  response:
    body: "plain text"

- request:
    url: /get/json
    method: GET
  response:
    headers:
      content-type: application/json
    body: >
      {"property":"value"}

- request:
    url: /get/420
    method: GET
  response:
    status: 420

- request:
    url: /get/query
    method: GET
    query:
      first: value1 with spaces!
      second: value2
  response:
    status: 200



- request:
    url: /post/auth
    method: POST
    post: some=data
    headers:
      authorization: Basic c3R1YmJ5OnBhc3N3b3Jk
  response:
    status: 201
    headers:
      location: /some/endpoint/id
    body: "resource has been created"

- request:
    url: /post/auth/pair
    method: POST
    post: some=data
    headers:
      authorization: Basic stubby:passwordZ0r
  response:
    status: 201
    headers:
      location: /some/endpoint/id
    body: "resource has been created"

- request:
    url: /put/latency
    method: PUT
  response:
    status: 200
    latency: 2000
    body: "updated"

- request:
    url: /file/dynamic/(.+)
  response:
    file: test/data/endpoints-<% url[1] %>.file

- request:
    url: /file/body/missingfile
  response:
    file: test/data/endpoints-nonexistant.file
    body: body contents!

- request:
    url: /file/body
  response:
    file: test/data/endpoints.file
    body: body contents!



-  request:
      url: /file/post/missingfile
      method: POST
      file: test/data/endpoints-nonexistant.file
      post: post contents!
   response: {}

- request:
    url: /file/post
    method: POST
    file: test/data/endpoints.file
    post: post contents!
  response: {}

- request:
    url: /search
  response: http://google.com

- request:
    url: /duplicated/header
  response:
    headers:
      Content-Type: 'application/json'
      Set-Cookie: ['type=ninja', 'language=coffeescript']

- request:
    url: /query/array
    query:
      array: one,two
  response:
    body: query as array works!



- request:
    url: /post/decoded/character
    query:
      q: '{'
    method: POST
  response:
    - body: 'decoded matched!'
      status: 200
